{"version":3,"sources":["components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","components/FeedbackOptions/FeedbackOptions.styles.jsx","components/FeedbackOptions/FeedbackOptions.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["StatList","styled","ul","StatItem","li","Statistics","good","neutral","bad","total","positivePercentage","SectionText","p","Section","title","children","Notification","message","FeedbackButtons","div","CustomButton","button","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","type","name","onClick","countReducer","prevState","nextState","App","useReducer","setGood","setNeutral","setBad","countTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRACaA,EAAWC,IAAOC,GAAV,oEAIRC,EAAWF,IAAOG,GAAV,+M,OCgBNC,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,eAACV,EAAD,WACE,eAACG,EAAD,oBAAiBG,KACjB,eAACH,EAAD,uBAAoBI,KACpB,eAACJ,EAAD,mBAAgBK,KAChB,eAACL,EAAD,qBAAkBM,KAClB,eAACN,EAAD,iCAA8BO,EAA9B,WCPSC,EAAcV,IAAOW,EAAV,6MCCT,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,qCACE,cAACJ,EAAD,UAAcG,IACbC,KCNA,I,IAAMJ,EAAcV,IAAOW,EAAV,iLCET,SAASI,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,cAAC,EAAD,UAAcA,ICFhB,IAAMC,EAAkBjB,IAAOkB,IAAV,6FAKfC,EAAenB,IAAOoB,OAAV,omBCeVC,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,cAACN,EAAD,UACGO,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,cAACR,EAAD,CAEES,KAAK,SACLC,KAAMF,EACNG,QAAS,kBAAMP,EAAgBI,IAJjC,SAMGA,GALIA,S,MCAb,SAASI,EAAaC,EAAWC,GAC/B,OAAOD,EAAYC,EAGN,SAASC,IACtB,MAAwBC,qBAAWJ,EAAc,GAAjD,mBAAO1B,EAAP,KAAa+B,EAAb,KACA,EAA8BD,qBAAWJ,EAAc,GAAvD,mBAAOzB,EAAP,KAAgB+B,EAAhB,KACA,EAAsBF,qBAAWJ,EAAc,GAA/C,mBAAOxB,EAAP,KAAY+B,EAAZ,KAoBMC,EAAqB,WACzB,OAAOlC,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAACK,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAAS,CAAEjB,OAAMC,UAASC,OAC1BgB,gBAhCiB,SAACK,GACxB,OAAQA,GACN,IAAK,OACHQ,EAAQ,GACR,MAEF,IAAK,UACHC,EAAW,GACX,MAEF,IAAK,MACHC,EAAO,GACP,MAEF,QACE,aAqBF,cAAC1B,EAAD,CAASC,MAAM,aAAf,SACG0B,IACC,cAAC,EAAD,CACElC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO+B,IACP9B,mBAnBD+B,KAAKC,MAAOpC,EAAOkC,IAAwB,OAsB5C,cAACxB,EAAD,CAAcC,QAAQ,2BC7DhC,IAYe0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7c540cb.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const StatList = styled.ul`\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n`\r\nexport const StatItem = styled.li`\r\n  display: flex;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  /* text-transform: uppercase; */\r\n  color: #0c1b42;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { StatList, StatItem } from './Statistics.styles'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <StatList>\r\n    <StatItem>Good: {good}</StatItem>\r\n    <StatItem>Neutral: {neutral}</StatItem>\r\n    <StatItem>Bad: {bad}</StatItem>\r\n    <StatItem>Total: {total}</StatItem>\r\n    <StatItem>Positive feedback: {positivePercentage}%</StatItem>\r\n  </StatList>\r\n)\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics\r\n","import styled from '@emotion/styled'\r\n\r\nexport const SectionText = styled.p`\r\n  padding: 10px;\r\n  margin-left: 40px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  text-transform: uppercase;\r\n  color: #0c1b42;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { SectionText } from './Section.styles'\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <SectionText>{title}</SectionText>\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const SectionText = styled.p`\r\n  padding: 10px;\r\n  margin-left: 40px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  color: #1860bec1;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { SectionText } from './Notification.styles'\r\n\r\nexport default function Notification({ message }) {\r\n  return <SectionText>{message}</SectionText>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\n\r\nexport const FeedbackButtons = styled.div`\r\n  padding: 10px 40px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\nexport const CustomButton = styled.button`\r\n  margin-right: 40px;\r\n  width: 120px;\r\n  background-color: #e5ebf3;\r\n  border-radius: 4px;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  color: #0c1b42;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n  :hover {\r\n    border-radius: 4px;\r\n    background-color: #61b0d4;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n    box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  }\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { FeedbackButtons, CustomButton } from './FeedbackOptions.styles'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <FeedbackButtons>\r\n    {Object.keys(options).map((option) => (\r\n      <CustomButton\r\n        key={option}\r\n        type=\"button\"\r\n        name={option}\r\n        onClick={() => onLeaveFeedback(option)}\r\n      >\r\n        {option}\r\n      </CustomButton>\r\n    ))}\r\n  </FeedbackButtons>\r\n)\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\nexport default FeedbackOptions\r\n","import { useReducer } from 'react'\nimport Statistics from './components/Statistics/Statistics'\nimport Section from './components/Section/Section'\nimport Notification from './components/Notification/Notification'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport './App.css'\n\nfunction countReducer(prevState, nextState) {\n  return prevState + nextState\n}\n\nexport default function App() {\n  const [good, setGood] = useReducer(countReducer, 0)\n  const [neutral, setNeutral] = useReducer(countReducer, 0)\n  const [bad, setBad] = useReducer(countReducer, 0)\n  const handleIncreament = (type) => {\n    switch (type) {\n      case 'good':\n        setGood(1)\n        break\n\n      case 'neutral':\n        setNeutral(1)\n        break\n\n      case 'bad':\n        setBad(1)\n        break\n\n      default:\n        return\n    }\n  }\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100)\n  }\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={handleIncreament}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}